#! /usr/bin/python3

#-*- coding:UTF-8 -*-

#
#                          RAGnarok
#                     Radare2 in Android Games
#      by Maria Garcia Raldua
#
#      credits to Michael Helwig (@c0dmtr1x / www.codemetrix.net)
#
#
#      Basic APK analysis based on radare2 and others
#      License: LGPLv3
#

from __future__ import print_function
from pyfiglet import Figlet
import r2pipe
import delegator
import sys,os,subprocess
import shutil,itertools,argparse,zipfile
import magic
from xml.dom.minidom import parseString
import sys
import os

import click
from rich import print





path = os.path.join(ROOT_DIR + '/mobsfAPI.py')
sys.path.append(path)


import importlib.util
spec = importlib.util.spec_from_file_location("mobsfAPI", path)
mob = importlib.util.module_from_spec(spec)
spec.loader.exec_module(mob)



dcheck = os.path.join('./dependency-check/bin/dependency-check.sh')
# Checks for strings, imports, methods and symbols
apkchecks =  {"strings":[".apk",".dex"]}
rootchecks=  {"strings":["bin/su", "sudo", "superuser"]}
urlchecks =  {"strings":["http:","https:","ftp:","rtsp:"]}
filechecks = {"imports":["java/io/File"],"symbols":["openFileOutputStream","getFilesDir", "getCacheDir","deleteFile", "getExternalStorageState", "isWritable", "setWritable"],"strings":["file:","/tmp/","/data/"]}
cryptochecks = {"imports":["crypt","keystore","cipher"],"methods":["crypt","cipher","keystore"],"symbols":["crypt","cipher","keystore"]}
httpschecks = {"imports":["javax/net/ssl"]}
otherchecks = {"strings":["user","token","api_key","pass","admin","secret","encrypt","decrypt","credit"],"methods":["health","level","pass","admin","secret","encrypt","decrypt"]}

# Filter (only for urls in assets at the moment)
filter_urls = [b'http://schemas.android.com/']



# Radare2 wrapper functions
def r2_check(strings,r2p,r2cmd):
    cmd = r2cmd + "~+" + ",".join(strings)
    results = r2p.cmd(cmd)
    return results

def r2_check_strings(strings,myr2pipe,message=None):
    return r2_check(strings,myr2pipe,"izq")

def r2_check_classes_and_methods(strings,r2p,message=None):
    return r2_check(strings,r2p,"icq")

def r2_check_imports(strings,r2p,message=None):
    return r2_check(strings,r2p,"iiq")

def r2_check_symbols(strings,r2p,message=None):
    return r2_check(strings,r2p,"isq")

def r2_cmd(cmd, r2p):
    return r2p.cmd(cmd)

def r2_pd_xrefs(address,r2p):
    cmd = "pd 1 @  " + address + "~XREF"
    result = r2p.cmd(cmd)
    return result

# Do searches with radare2
def analyse(checks,r2p):
    result = {}
    if "strings" in checks:
        result["strings"] = r2_check_strings(checks["strings"],r2p)
    if "methods" in checks:
        result["methods"] = r2_check_classes_and_methods(checks["methods"],r2p)
    if "imports" in checks:
        result["imports"] = r2_check_imports(checks["imports"],r2p)
    if "symbols" in checks:
        print("holi")
        result["symbols"] = r2_check_symbols(checks["symbols"],r2p)
    return result

# Try to find xrefs
def r2_get_xrefs(r2_result,result_type,r2p):
    if "vaddr=" in r2_result:
        address = (r2_result.split(" ")[0]).split("=")[1]
    else:
        address = r2_result.split(" ")[0]
    if result_type == "strings":
        xrefs = r2_pd_xrefs(address,r2p)
        # Sometimes string results seem to be shifted by 1 byte. There's probably a beter solution to this...
        if not xrefs:
            xrefs = r2_pd_xrefs(address + "-1",r2p)
        return xrefs
    else:
        return r2_pd_xrefs(address,r2p)

# Locate dex files
def get_dex_files(directory):
    list=[]
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith(".dex"):
                list.append(os.path.join(root,file))
    return list

# Print permission from Manifest
def print_manifest(manifestpath):
    with open(manifestpath,'r') as f:
        data = f.read()
        dom = parseString(data)
        manifest_nodes = dom.getElementsByTagName('manifest')
        activity_nodes = dom.getElementsByTagName('activity')
        service_nodes = dom.getElementsByTagName('service')
        receiver_nodes = dom.getElementsByTagName('receiver')

        for node in manifest_nodes:
            print("[*] Package: " + node.getAttribute("package"))

        print("\n[*] Activitives:")
        for node in activity_nodes:
            print(node.getAttribute("android:name"))

        print("\n[*] Services:")
        for node in service_nodes:
            print(node.getAttribute("android:name"))

        print("\n[*] Receivers:")
        for node in receiver_nodes:
            print(node.getAttribute("android:name"))
            intent_filters = node.getElementsByTagName('intent-filter')
            if len(intent_filters) > 0:
               for filter_node in intent_filters:
                    action_nodes = filter_node.getElementsByTagName('action')
                    for action_node in action_nodes:
                         print(" -> " + action_node.getAttribute("android:name"))

        print("\n[*] Permissions requested: ")
        permission_nodes = dom.getElementsByTagName('uses-permission')
        for node in permission_nodes:
            print(node.toxml())

# Output with xrefs
def print_with_xrefs(r2_results,result_type,r2p):
    for result in r2_results.split("\n"):
        try:
            print(result)
        except UnicodeEncodeError:
            print(result.encode('ascii', 'ignore'))
        xrefs = r2_get_xrefs(result,result_type,r2p)
        if xrefs:
            for xref in xrefs.split("\n"):
                output = xref.lstrip()[1:].lstrip()
                if(output[0] == ';'):
                     output = output[2:]
                print(" -> " + output)

# Output analysis results
def print_results(analysis_results,messages,r2p):
    for key,result in analysis_results.items():
        if len(result) > 0:
            print(messages["found"] % key)
            if key in ["strings","symbols","methods"]:
                print_with_xrefs(result,key,r2p)
            else:
                print(result)
        else:
            print(messages["not_found"] % key)

    return



extract_dir = None
working_dir = "apk-extracted"
smali_dir = ""
asset_dir = ""
zip_dir = ""

@click.group()
@click.option('--output', '-o', required=False,default=None, help='output directory')
def rag(output: str):
    custom_fig = Figlet(font='rectangles')
    click.secho('   ***************************************', fg='blue')
    click.secho(custom_fig.renderText('  RAGnarok'))
    click.secho('   ***************************************', fg='blue')
    click.secho('   Radare2 in Android Games\n   by: Maria Raldu\n', fg='red')
    global extract_dir
    if output:
       
        extract_dir = output
    else:
        
        extract_dir = os.getcwd()+ '/' + working_dir

    global smali_dir
    global asset_dir
    global zip_dir
    zip_dir = extract_dir + "/zip"
    smali_dir = extract_dir + "/smali"
    asset_dir = extract_dir + "/zip/assets"


@rag.command()
@click.option('--cleanup-before','-c',required=False,default=False, help='Cleanup before extraction. WARNING: Deletes contents of output directory')
@click.argument('apkfile',nargs=-1,type=click.Path(exists=True),required=True)
def unzip(apkfile, cleanup_before: bool):
    """
        Unpack an APK with unzip.

        :return:
    """
    # Cleanup before
    if cleanup_before:
        print("\n[*] Cleaning up working_dir...")
        if(os.path.isdir(extract_dir)):
            shutil.rmtree(extract_dir + "/")
    print("[*] Extracting APK file as zip")
    for apk in apkfile:
        zip_ref = zipfile.ZipFile(apk, 'r')
        zip_ref.extractall(extract_dir + '/zip')
        click.secho('The files have been extracted in /zip folder', fg='green', bold=True)
        zip_ref.close()

@rag.command()
@click.option('--extended', '-e', required=False, default=False,help='Do extended radare2 analysis. Try to find XREFS. This might take some time.')
@click.option('--skip-assets', '-sa',required=False,default=False, help='skip asset listing and filetype detection')
@click.argument('dexlist',nargs=-1,type=click.Path(exists=True),required=True)
def dex(dexlist,extended: bool, skip_assets: bool):
    """
        Analyse dex file with radare2.

        :return:
    """
    

    for dexfile in dexlist:

        print("\n[***] Analysing " + dexfile + " [***]")
        
        # Open dex with radare2
        print("\n[*] Opening dexfile with radare2...")
        r2p=r2pipe.open(dexfile)

        # Analyse with radare2
        if extended:
            print("\n[*] Analyzing with radare2. This might take some time... ")
            r2_cmd("aad;aan;aas;",r2p)

        # Root detection check
        rootresults = analyse(rootchecks,r2p)
        print_results(rootresults,{"found":"\n[*] Possible root detection found in %s:","not_found":"\n[*] No signs of root detection in %s"},r2p)

        # References to APKs and dex files
        apkresults = analyse(apkchecks,r2p)
        print_results(apkresults,{"found":"\n[*] References to apks or dexfiles found in %s:","not_found":"\n[*] No references to apks and dexfiles found in %s"},r2p)

        # Check for urls
        urlresults = analyse(urlchecks,r2p)
        print_results(urlresults,{"found":"\n[*] Possible URLs found in %s","not_found":"\n[*] No URLs found in %s"},r2p)

        # Check for crypto:
        cryptoresults = analyse(cryptochecks,r2p)
        print_results(cryptoresults,{"found":"\n[*] Possible crypto stuff found in %s","not_found":"\n[*] No crypto stuff found in %s"},r2p)

        # Check for file access
        fileresults = analyse(filechecks,r2p)
        print_results(fileresults,{"found":"\n[*] Possible file access / references found in %s","not_found":"\n[*] No file access / references found in %s"},r2p)

        # Check for https
        httpsresults = analyse(httpschecks,r2p)
        print_results(httpsresults,{"found":"\n[*] Possible https / certificate references found in %s","not_found":"\n[*] No https / certificate references found in %s"},r2p)

        # Check for passwords and other interesting strings
        otherresults = analyse(otherchecks,r2p)
        print_results(otherresults,{"found":"\n[*] Further interesting stuff found in %s","not_found":"\n[*] No more interesting things found in %s"},r2p)


        print("\n[***] End of dex analysis [***]")


    # Check for native libraries (folders)
    print('dir ' + extract_dir)
    lib_dir = extract_dir + "/zip/" + "lib"
    if os.path.isdir(lib_dir):
        print("\n[*] Native libraries found:")
        for root, dirs, files in os.walk(lib_dir):
            for file in files:
                print(os.path.join(root,file))
    else:
        print("\n[*] No native libraries found")



    # Output assets
    if not skip_assets:
        if os.path.isdir(asset_dir):
            print("\n[*] Assets found:")
            with magic.Magic() as m:
                for root, dirs, files in os.walk(asset_dir):
                    for file in files:
                        filetype = m.id_filename(os.path.join(root,file))
                        print(os.path.join(root,file) + " - " + filetype)
        else:
            print("\n[*] No assets found")


    print("\n[*] Looking for interesting filetypes and files:")
    for root, dirs, files in os.walk(extract_dir + "/zip/"):
        for file in files:
            interesting_types = ["certificate", "serialize", "json", "database"]
            interesting_exts = ["jks","apk","crt","cert","pem","rsa"]
            filepath = os.path.join(root,file)

            with magic.Magic() as m:
                filetype = m.id_filename(filepath)
            if (any(x in filetype.lower() for x in interesting_types) or filetype == "data"):
                print(" " + filepath + " - " + filetype)
            elif os.path.splitext(filepath) and len(os.path.splitext(filepath)) > 1:
                if any(x in os.path.splitext(filepath)[1].lower() for x in interesting_exts):
                    print(" " + filepath + " - " + filetype)

    # Looking for IPs
    if os.path.isdir(zip_dir):
        print("\n[*] Looking for IPv4s in unzipped APK file")
        try:
            result = subprocess.check_output(["grep","-arnoE","[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}", zip_dir])
            print(result.decode('utf-8'))
        except subprocess.CalledProcessError as e:
            if e.returncode == 1:
                print(" -> No results found")
            else:
                print(" [!] Error executing grep")
        if os.path.isdir(smali_dir + "/res"):
            print("\n[*] Looking for IPv4s in extracted ressources")
            try:
                result = subprocess.check_output(["grep","-arnoE","[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}", smali_dir + "/res"])
                print(result.decode('utf-8'))
            except subprocess.CalledProcessError as e:
                if e.returncode == 1:
                    print(" -> No results found")
                else:
                    print(" [!] Error executing grep")

    # Looking for URLs in assets
    if os.path.isdir(zip_dir):
        print("\n[*] Looking for URLs in unzipped APK file")
        try:
            result = subprocess.check_output(["grep","-arnoE","(http|https|file|ftp)://[a-zA-Z0-9?/._=-]+" ,zip_dir])
            filtered = True
            for line in result.split(b'\n'):
                
                if not any(x in line for x in filter_urls) and line != b'':
                    print(line.decode('utf-8'))
                    filtered = False
            if filtered:
                print(" -> No interesting results found (filtered)")
        except subprocess.CalledProcessError as e:
            if e.returncode == 1:
                print(" -> No results found")
            else:
                print(" [!] Error executing grep")
        if os.path.isdir(smali_dir + "/res"):
            print("\n[*] Looking for URLs in extracted ressources")
            try:
                result = subprocess.check_output(["grep","-arnoE","(http|https|file|ftp)://[a-zA-Z0-9?/._=-]+", smali_dir + "/res" ])
                filtered = True
               
                for line in result.split(b"\n"):
                    if not any(x in line for x in filter_urls) and line != b"":
                        print(line.decode('utf-8'))
                        filtered = False
                if filtered == True:
                    print(" -> No interesting results found (filtered)")
            except subprocess.CalledProcessError as e:
                if e.returncode == 1:
                    print(" -> No results found")
                else:
                    print(" [!] Error executing grep")


    # Looking for certificates
    if os.path.isdir(zip_dir):
        print("\n[*] Looking for private / public key files")
        try:
            result = subprocess.check_output(["grep","-arnoE","(PRIVATE|PUBLIC) KEY", zip_dir])
            print(result.decode('utf-8'))
        except subprocess.CalledProcessError as e:
            if e.returncode != 1:
                print(" [!] Error executing grep")
            else:
                print(" -> No results found")


@rag.command()
@click.argument('apkfile',nargs=-1,type=click.Path(exists=True),required=True)
def apkid(apkfile):
    """
        Analyse apk with ApkID

        :return:
    """
    print("\n[*] Running APKiD ")
    for apk in apkfile:
        try:
            o = delegator.run(subprocess.list2cmdline([
                'apkid',
                '-r',
                apk,
            ]), timeout=60 * 5)
            print(o.out)
        except OSError as e:
            if e.errno == os.errno.ENOENT:
                print("[*] APKiD not found. Skipping.")
            else:
                raise


@rag.command()
@click.argument('apkfile', nargs=-1,type=click.Path(exists=True),required=True)
def apktool(apkfile):
    """
        Dissasembling apk with appktool

        :return:
    """
    for apk in apkfile:
        print("[*] Disassembling apkfile with apktool:")
        o = delegator.run(subprocess.list2cmdline([
            'apktool',
            'decode',
            '-f',
            '-r',
            '-o',
            smali_dir,
            apk
        ]), timeout=60 * 5)
        
        if len(o.err) > 0:
            print('An error may have occurred while extracting the APK.')
            print(o.err)
        else:
            print('The files have been extracted in /{0}'.format(smali_dir))


@rag.command()
@click.option('--pdf', '-p', help='Generate pdf after scan', is_flag=True)
@click.argument('apkfile',nargs=-1,type=click.Path(exists=True),required=True)
def mobsf(apkfile,pdf: bool):
    """
        Analyse apk with mobsf

        :return:
    """
    for apk in apkfile:
        data = mob.upload(apk)
        print("[bold green]File downloaded...[/bold green]")
        mob.scan(data)
        click.secho('The file has been scanned', fg='green', bold=True)
        if pdf:
            mob.pdf_gen(data)


@rag.command()
@click.argument('apkfile',nargs=-1,type=click.Path(exists=True),required=True)
def depcheck(apkfile):
    """
        Analyse dependencies with depcheck

        :return:
    """
    for apk in apkfile:
        output = subprocess.check_output([dcheck, "-o", ROOT_DIR,"-s", apk])
        print(output)



if __name__ == '__main__':
    rag()





